commit 5bf13b57235bb227b78bbb7a5e11a80ebbfe2d87
Author: Daniel Charles <daniel.charles@intel.com>
Date:   Fri Feb 9 14:39:27 2018 -0800

    Enable VAVDA, VAVEA and VAJDA on linux with VAAPI only
    
    This patch contains all the changes necessary to use VA-API along with
    vaapi-driver to run all media use cases supported with hardware acceleration.
    
    It is intended to remain as experimental accessible from chrome://flags on linux.
    It requires libva/intel-vaapi-driver to be installed on the system path where
    chrome is executed.  Other drivers could be tested if available. Flags are
    kept independent for linux, where this feature has to be enabled before
    actually using it.  This should not change how other OSes use the flags
    already, the new flags will show at the buttom on the section of unavailable
    experiments
    
    The changes cover a range of compiler pre-processor flags to enable the stack.
    It moves the presandbox operations to the vaapi_wrapper class as the hook function
    is available there. vaInit will open driver on the correct installed folder.
    
    chrome flags consolidtation into only two flags for linux.  Mjpeg and accelerated
    video are used.  The other flags are kept for ChromeOS and other OSes.
    
    Developer testing was made on skylake hardware, ChromeOS and Ubuntu.
    
    BUG=NONE
    TEST=subjective testing with VAVDA,VAVEA and VAJDA, autotest for encoder
         and decoder hardware accelerated
         have libva/intel-vaapi-driver installed and not installed in the system
         repeat on different hardware families
    
    Cq-Include-Trybots: master.tryserver.chromium.android:android_optional_gpu_tests_rel;master.tryserver.chromium.linux:linux_optional_gpu_tests_rel;master.tryserver.chromium.mac:mac_optional_gpu_tests_rel;master.tryserver.chromium.win:win_optional_gpu_tests_rel
    Change-Id: Ifbbf5c9e5221a8b5733fc6d4d0cf984a1f103171
    Signed-off-by: Daniel Charles <daniel.charles@intel.com>

diff --git chrome/browser/about_flags.cc chrome/browser/about_flags.cc
index ca5916550530..2c0444b73d7e 100644
--- chrome/browser/about_flags.cc
+++ chrome/browser/about_flags.cc
@@ -1249,12 +1249,14 @@ const FeatureEntry kFeatureEntries[] = {
      flag_descriptions::kUiPartialSwapDescription, kOsAll,
      SINGLE_DISABLE_VALUE_TYPE(switches::kUIDisablePartialSwap)},
 #if BUILDFLAG(ENABLE_WEBRTC)
+#if defined(OS_CHROMEOS) || defined(OS_ANDROID)
     {"disable-webrtc-hw-decoding", flag_descriptions::kWebrtcHwDecodingName,
      flag_descriptions::kWebrtcHwDecodingDescription, kOsAndroid | kOsCrOS,
      SINGLE_DISABLE_VALUE_TYPE(switches::kDisableWebRtcHWDecoding)},
     {"disable-webrtc-hw-encoding", flag_descriptions::kWebrtcHwEncodingName,
      flag_descriptions::kWebrtcHwEncodingDescription, kOsAndroid | kOsCrOS,
      SINGLE_DISABLE_VALUE_TYPE(switches::kDisableWebRtcHWEncoding)},
+#endif
     {"enable-webrtc-hw-h264-encoding",
      flag_descriptions::kWebrtcHwH264EncodingName,
      flag_descriptions::kWebrtcHwH264EncodingDescription, kOsAndroid | kOsCrOS,
@@ -1550,6 +1552,13 @@ const FeatureEntry kFeatureEntries[] = {
      flag_descriptions::kShowTouchHudDescription, kOsCrOS,
      SINGLE_VALUE_TYPE(ash::switches::kAshTouchHud)},
 #endif  // OS_CHROMEOS
+#if defined(OS_LINUX) && !defined(OS_CHROMEOS) && !defined(OS_ANDROID)
+    {
+        "enable-accelerated-video", flag_descriptions::kAcceleratedVideoName,
+        flag_descriptions::kAcceleratedVideoDescription, kOsLinux,
+        SINGLE_VALUE_TYPE(switches::kEnableAcceleratedVideo),
+    },
+#else
     {
         "disable-accelerated-video-decode",
         flag_descriptions::kAcceleratedVideoDecodeName,
@@ -1557,6 +1566,7 @@ const FeatureEntry kFeatureEntries[] = {
         kOsMac | kOsWin | kOsCrOS | kOsAndroid,
         SINGLE_DISABLE_VALUE_TYPE(switches::kDisableAcceleratedVideoDecode),
     },
+#endif
 #if defined(OS_WIN)
     {"enable-hdr", flag_descriptions::kEnableHDRName,
      flag_descriptions::kEnableHDRDescription, kOsWin,
@@ -2268,12 +2278,17 @@ const FeatureEntry kFeatureEntries[] = {
      FEATURE_VALUE_TYPE(features::kOpenVR)},
 #endif  // ENABLE_OPENVR
 #endif  // ENABLE_VR
-#if defined(OS_CHROMEOS)
+#if defined(OS_LINUX) && !defined(OS_CHROMEOS) && !defined(OS_ANDROID)
+    {"enable-accelerated-mjpeg-decode",
+     flag_descriptions::kAcceleratedMjpegDecodeName,
+     flag_descriptions::kAcceleratedMjpegDecodeDescription, kOsLinux,
+     SINGLE_VALUE_TYPE(switches::kEnableAcceleratedMjpegDecode)},
+#elif defined(OS_CHROMEOS)
     {"disable-accelerated-mjpeg-decode",
      flag_descriptions::kAcceleratedMjpegDecodeName,
      flag_descriptions::kAcceleratedMjpegDecodeDescription, kOsCrOS,
      SINGLE_DISABLE_VALUE_TYPE(switches::kDisableAcceleratedMjpegDecode)},
-#endif  // OS_CHROMEOS
+#endif
     {"v8-cache-options", flag_descriptions::kV8CacheOptionsName,
      flag_descriptions::kV8CacheOptionsDescription, kOsAll,
      MULTI_VALUE_TYPE(kV8CacheOptionsChoices)},
diff --git chrome/browser/chromeos/login/chrome_restart_request.cc chrome/browser/chromeos/login/chrome_restart_request.cc
index 309d7b6f1c25..c0f42da40797 100644
--- chrome/browser/chromeos/login/chrome_restart_request.cc
+++ chrome/browser/chromeos/login/chrome_restart_request.cc
@@ -19,6 +19,7 @@
 #include "base/sys_info.h"
 #include "base/timer/timer.h"
 #include "base/values.h"
+#include "build/build_config.h"
 #include "cc/base/switches.h"
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/chromeos/boot_times_recorder.h"
@@ -84,9 +85,14 @@ void DeriveCommandLine(const GURL& start_url,
     ::switches::kDisable2dCanvasImageChromium,
     ::switches::kDisableAccelerated2dCanvas,
     ::switches::kDisableAcceleratedJpegDecoding,
+#if defined(OS_LINUX) && !defined(OS_CHROMEOS) && !defined(OS_ANDROID)
+    ::switches::kEnableAcceleratedMjpegDecode,
+    ::switches::kEnableAcceleratedVideo,
+#else
     ::switches::kDisableAcceleratedMjpegDecode,
     ::switches::kDisableAcceleratedVideoDecode,
     ::switches::kDisableAcceleratedVideoEncode,
+#endif
     ::switches::kDisableBlinkFeatures,
     ::switches::kDisableCastStreamingHWEncoding,
     ::switches::kDisableDistanceFieldText,
@@ -164,7 +170,7 @@ void DeriveCommandLine(const GURL& start_url,
     ::switches::kDisableWebGLImageChromium,
     ::switches::kEnableWebGLImageChromium,
     ::switches::kEnableWebVR,
-#if BUILDFLAG(ENABLE_WEBRTC)
+#if BUILDFLAG(ENABLE_WEBRTC) && (defined(OS_CHROMEOS) || defined(OS_ANDROID))
     ::switches::kDisableWebRtcHWDecoding,
     ::switches::kDisableWebRtcHWEncoding,
 #endif
diff --git chrome/browser/flag_descriptions.cc chrome/browser/flag_descriptions.cc
index 6dc0345f58fa..96eb98b66207 100644
--- chrome/browser/flag_descriptions.cc
+++ chrome/browser/flag_descriptions.cc
@@ -14,6 +14,13 @@ const char kAccelerated2dCanvasDescription[] =
     "Enables the use of the GPU to perform 2d canvas rendering instead of "
     "using software rendering.";
 
+#if defined(OS_LINUX) && !defined(OS_CHROMEOS) && !defined(OS_ANDROID)
+const char kAcceleratedVideoName[] = "Hardware-accelerated video";
+const char kAcceleratedVideoDescription[] =
+    "Hardware-accelerated video where VA-API driver is installed on the"
+    "system.";
+#endif
+
 const char kAcceleratedVideoDecodeName[] = "Hardware-accelerated video decode";
 const char kAcceleratedVideoDecodeDescription[] =
     "Hardware-accelerated video decode where available.";
@@ -1597,6 +1604,7 @@ const char kWebrtcEchoCanceller3Name[] = "WebRTC Echo Canceller 3.";
 const char kWebrtcEchoCanceller3Description[] =
     "Experimental WebRTC echo canceller (AEC3).";
 
+#if defined(OS_CHROMEOS) || defined(OS_ANDROID)
 const char kWebrtcHwDecodingName[] = "WebRTC hardware video decoding";
 const char kWebrtcHwDecodingDescription[] =
     "Support in WebRTC for decoding video streams using platform hardware.";
@@ -1604,6 +1612,7 @@ const char kWebrtcHwDecodingDescription[] =
 const char kWebrtcHwEncodingName[] = "WebRTC hardware video encoding";
 const char kWebrtcHwEncodingDescription[] =
     "Support in WebRTC for encoding video streams using platform hardware.";
+#endif
 
 const char kWebrtcHwH264EncodingName[] = "WebRTC hardware h264 video encoding";
 const char kWebrtcHwH264EncodingDescription[] =
@@ -2434,14 +2443,16 @@ const char kTranslateNewUxDescription[] =
 
 // Chrome OS -------------------------------------------------------------------
 
-#if defined(OS_CHROMEOS)
+#if defined(OS_CHROMEOS) || (defined(OS_LINUX) && !defined(OS_ANDROID))
 
 const char kAcceleratedMjpegDecodeName[] =
     "Hardware-accelerated mjpeg decode for captured frame";
 const char kAcceleratedMjpegDecodeDescription[] =
     "Enable hardware-accelerated mjpeg decode for captured frame where "
     "available.";
+#endif
 
+#if defined(OS_CHROMEOS)
 const char kAllowTouchpadThreeFingerClickName[] = "Touchpad three-finger-click";
 const char kAllowTouchpadThreeFingerClickDescription[] =
     "Enables touchpad three-finger-click as middle button.";
diff --git chrome/browser/flag_descriptions.h chrome/browser/flag_descriptions.h
index 33aafaad4557..adb7e619d3ff 100644
--- chrome/browser/flag_descriptions.h
+++ chrome/browser/flag_descriptions.h
@@ -37,6 +37,10 @@ namespace flag_descriptions {
 extern const char kAccelerated2dCanvasName[];
 extern const char kAccelerated2dCanvasDescription[];
 
+#if defined(OS_LINUX) && !defined(OS_CHROMEOS) && !defined(OS_ANDROID)
+extern const char kAcceleratedVideoName[];
+extern const char kAcceleratedVideoDescription[];
+#endif
 extern const char kAcceleratedVideoDecodeName[];
 extern const char kAcceleratedVideoDecodeDescription[];
 
@@ -1498,13 +1502,17 @@ extern const char kPermissionPromptPersistenceToggleDescription[];
 
 #endif  // defined(OS_MACOSX)
 
-// Chrome OS ------------------------------------------------------------------
-
-#if defined(OS_CHROMEOS)
+#if defined(OS_CHROMEOS) || (defined(OS_LINUX) && !defined(OS_ANDROID))
 
 extern const char kAcceleratedMjpegDecodeName[];
 extern const char kAcceleratedMjpegDecodeDescription[];
 
+#endif
+
+// Chrome OS ------------------------------------------------------------------
+
+#if defined(OS_CHROMEOS)
+
 extern const char kAllowTouchpadThreeFingerClickName[];
 extern const char kAllowTouchpadThreeFingerClickDescription[];
 
diff --git content/browser/gpu/compositor_util.cc content/browser/gpu/compositor_util.cc
index 4479fa5221b2..fa2ae89088d3 100644
--- content/browser/gpu/compositor_util.cc
+++ content/browser/gpu/compositor_util.cc
@@ -98,7 +98,11 @@ const GpuFeatureData GetGpuFeatureData(size_t index, bool* eof) {
       {"video_decode",
        manager->GetFeatureStatus(
            gpu::GPU_FEATURE_TYPE_ACCELERATED_VIDEO_DECODE),
+#if defined(OS_LINUX) && !defined(OS_CHROMEOS) && !defined(OS_ANDROID)
+       !command_line.HasSwitch(switches::kEnableAcceleratedVideo),
+#else
        command_line.HasSwitch(switches::kDisableAcceleratedVideoDecode),
+#endif
        "Accelerated video decode has been disabled, either via blacklist,"
        " about:flags or the command line.",
        true},
diff --git content/browser/gpu/gpu_process_host.cc content/browser/gpu/gpu_process_host.cc
index ee8ae6f66482..a2d14ab59730 100644
--- content/browser/gpu/gpu_process_host.cc
+++ content/browser/gpu/gpu_process_host.cc
@@ -120,7 +120,7 @@ static const char* const kSwitchNames[] = {
     switches::kDisableGLExtensions,
     switches::kDisableLogging,
     switches::kDisableShaderNameHashing,
-#if BUILDFLAG(ENABLE_WEBRTC)
+#if BUILDFLAG(ENABLE_WEBRTC) && !defined(OS_LINUX)
     switches::kDisableWebRtcHWEncoding,
 #endif
 #if defined(OS_WIN)
diff --git content/browser/renderer_host/media/video_capture_browsertest.cc content/browser/renderer_host/media/video_capture_browsertest.cc
index 40529f778a06..1fe3fa53f60b 100644
--- content/browser/renderer_host/media/video_capture_browsertest.cc
+++ content/browser/renderer_host/media/video_capture_browsertest.cc
@@ -164,8 +164,13 @@ class VideoCaptureBrowserTest : public ContentBrowserTest,
       base::CommandLine::ForCurrentProcess()->AppendSwitch(
           switches::kUseFakeJpegDecodeAccelerator);
     } else {
+#if defined(OS_LINUX) && !defined(OS_CHROMEOS) && !defined(OS_ANDROID)
+      base::CommandLine::ForCurrentProcess()->AppendSwitch(
+          switches::kEnableAcceleratedMjpegDecode);
+#else
       base::CommandLine::ForCurrentProcess()->AppendSwitch(
           switches::kDisableAcceleratedMjpegDecode);
+#endif
     }
   }
 
diff --git content/browser/renderer_host/media/video_capture_gpu_jpeg_decoder.cc content/browser/renderer_host/media/video_capture_gpu_jpeg_decoder.cc
index 2be279b50ea4..c96432b97e07 100644
--- content/browser/renderer_host/media/video_capture_gpu_jpeg_decoder.cc
+++ content/browser/renderer_host/media/video_capture_gpu_jpeg_decoder.cc
@@ -65,15 +65,21 @@ void VideoCaptureGpuJpegDecoder::Initialize() {
   bool is_platform_supported =
       base::CommandLine::ForCurrentProcess()->HasSwitch(
           switches::kUseFakeJpegDecodeAccelerator);
-#if defined(OS_CHROMEOS)
-  // Non-ChromeOS platforms do not support HW JPEG decode now. Do not establish
-  // gpu channel to avoid introducing overhead.
+#if !defined(OS_ANDROID) && defined(OS_LINUX)
+  // Non-ChromeOS or Non-Linux platforms do not support HW JPEG decode now. Do
+  // not establish gpu channel to avoid introducing overhead.
   is_platform_supported = true;
 #endif
 
   if (!is_platform_supported ||
+#if defined(OS_LINUX) && !defined(OS_CHROMEOS) && !defined(OS_ANDROID)
+      !base::CommandLine::ForCurrentProcess()->HasSwitch(
+          switches::kEnableAcceleratedMjpegDecode)
+#else
       base::CommandLine::ForCurrentProcess()->HasSwitch(
-          switches::kDisableAcceleratedMjpegDecode)) {
+          switches::kDisableAcceleratedMjpegDecode)
+#endif
+          ) {
     decoder_status_ = FAILED;
     RecordInitDecodeUMA_Locked();
     return;
diff --git content/browser/renderer_host/render_process_host_impl.cc content/browser/renderer_host/render_process_host_impl.cc
index 0e57990b06a1..196590e5fd04 100644
--- content/browser/renderer_host/render_process_host_impl.cc
+++ content/browser/renderer_host/render_process_host_impl.cc
@@ -2530,7 +2530,11 @@ void RenderProcessHostImpl::PropagateBrowserCommandLineToRenderer(
     switches::kDefaultTileHeight,
     switches::kDisable2dCanvasImageChromium,
     switches::kDisableAcceleratedJpegDecoding,
+#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+    switches::kEnableAcceleratedVideo,
+#else
     switches::kDisableAcceleratedVideoDecode,
+#endif
     switches::kDisableBackgroundTimerThrottling,
     switches::kDisableBreakpad,
     switches::kDisableCompositorUkmForTests,
@@ -2663,8 +2667,10 @@ void RenderProcessHostImpl::PropagateBrowserCommandLineToRenderer(
     switches::kDisableMojoRenderer,
 #endif
 #if BUILDFLAG(ENABLE_WEBRTC)
+#if !defined(OS_LINUX) || defined(OS_CHROMEOS)
     switches::kDisableWebRtcHWDecoding,
     switches::kDisableWebRtcHWEncoding,
+#endif
     switches::kEnableWebRtcSrtpAesGcm,
     switches::kEnableWebRtcSrtpEncryptedHeaders,
     switches::kEnableWebRtcStunOrigin,
diff --git content/browser/webrtc/webrtc_media_recorder_browsertest.cc content/browser/webrtc/webrtc_media_recorder_browsertest.cc
index 3d815a27673d..2c960484c205 100644
--- content/browser/webrtc/webrtc_media_recorder_browsertest.cc
+++ content/browser/webrtc/webrtc_media_recorder_browsertest.cc
@@ -58,7 +58,12 @@ class WebRtcMediaRecorderTest
       return;
     // This flag is also used for encoding, https://crbug.com/616640.
     base::CommandLine::ForCurrentProcess()->AppendSwitch(
-        switches::kDisableAcceleratedVideoDecode);
+#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+        switches::kEnableAcceleratedVideo
+#else
+        switches::kDisableAcceleratedVideoDecode
+#endif
+        );
   }
 
  private:
diff --git content/gpu/BUILD.gn content/gpu/BUILD.gn
index 4c50c537184e..8c5f50864b80 100644
--- content/gpu/BUILD.gn
+++ content/gpu/BUILD.gn
@@ -125,4 +125,8 @@ target(link_target_type, "gpu_sources") {
   if (is_desktop_linux && (!is_chromecast || is_cast_desktop_build)) {
     configs += [ "//build/config/linux/dri" ]
   }
+
+  if (is_desktop_linux) {
+    public_configs = [ "//media/gpu:libva_config" ]
+  }
 }
diff --git content/gpu/gpu_main.cc content/gpu/gpu_main.cc
index f701f23b2c78..6402c07c21e7 100644
--- content/gpu/gpu_main.cc
+++ content/gpu/gpu_main.cc
@@ -273,7 +273,7 @@ int GpuMain(const MainFunctionParams& parameters) {
 
   base::PlatformThread::SetName("CrGpuMain");
 
-#if defined(OS_ANDROID) || defined(OS_CHROMEOS)
+#if defined(OS_LINUX)
   // Set thread priority before sandbox initialization.
   base::PlatformThread::SetCurrentThreadPriority(base::ThreadPriority::DISPLAY);
 #endif
@@ -302,7 +302,7 @@ int GpuMain(const MainFunctionParams& parameters) {
   GetContentClient()->SetGpuInfo(gpu_init->gpu_info());
 
   base::ThreadPriority io_thread_priority = base::ThreadPriority::NORMAL;
-#if defined(OS_ANDROID) || defined(OS_CHROMEOS)
+#if defined(OS_LINUX)
   io_thread_priority = base::ThreadPriority::DISPLAY;
 #endif
 
diff --git content/public/browser/gpu_utils.cc content/public/browser/gpu_utils.cc
index bb72dffb57e6..c989ef45b509 100644
--- content/public/browser/gpu_utils.cc
+++ content/public/browser/gpu_utils.cc
@@ -7,6 +7,7 @@
 #include "base/command_line.h"
 #include "base/single_thread_task_runner.h"
 #include "base/strings/string_number_conversions.h"
+#include "build/build_config.h"
 #include "content/browser/gpu/gpu_process_host.h"
 #include "content/public/common/content_features.h"
 #include "content/public/common/content_switches.h"
@@ -55,10 +56,18 @@ const gpu::GpuPreferences GetGpuPreferencesFromCommandLine() {
   gpu_preferences.in_process_gpu =
       command_line->HasSwitch(switches::kInProcessGPU);
   gpu_preferences.disable_accelerated_video_decode =
+#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+      !command_line->HasSwitch(switches::kEnableAcceleratedVideo);
+#else
       command_line->HasSwitch(switches::kDisableAcceleratedVideoDecode);
+#endif
   gpu_preferences.disable_accelerated_video_encode =
+#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+      !command_line->HasSwitch(switches::kEnableAcceleratedVideo);
+#else
       command_line->HasSwitch(switches::kDisableAcceleratedVideoEncode);
-#if BUILDFLAG(ENABLE_WEBRTC)
+#endif
+#if BUILDFLAG(ENABLE_WEBRTC) && (defined(OS_CHROMEOS) || defined(OS_ANDROID))
   gpu_preferences.disable_web_rtc_hw_encoding =
       command_line->HasSwitch(switches::kDisableWebRtcHWEncoding);
 #endif
diff --git content/public/common/content_switches.cc content/public/common/content_switches.cc
index 986e4bbfe273..bd239fa4dfea 100644
--- content/public/common/content_switches.cc
+++ content/public/common/content_switches.cc
@@ -78,12 +78,21 @@ const char kDisable3DAPIs[]                 = "disable-3d-apis";
 
 // Disable gpu-accelerated 2d canvas.
 const char kDisableAccelerated2dCanvas[]    = "disable-accelerated-2d-canvas";
-
+#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+// Enable hardware accelerated mjpeg decode on linux
+const char kEnableAcceleratedMjpegDecode[] = "enable-accelerated-mjpeg-decode";
+#else
 // Disable hardware acceleration of mjpeg decode for captured frame, where
 // available.
 const char kDisableAcceleratedMjpegDecode[] =
     "disable-accelerated-mjpeg-decode";
+#endif
 
+#if defined(OS_LINUX)
+// Enables hardware acceleration of video for Linux only. VA-API driver
+// is required to be present on the system installation.
+const char kEnableAcceleratedVideo[] = "enable-accelerated-video";
+#endif
 // Disables hardware acceleration of video decode, where available.
 const char kDisableAcceleratedVideoDecode[] =
     "disable-accelerated-video-decode";
@@ -888,11 +897,13 @@ const char kZygoteProcess[]                 = "zygote";
 // ignores this switch on its stable and beta channels.
 const char kDisableWebRtcEncryption[]      = "disable-webrtc-encryption";
 
+#if defined(OS_CHROMEOS)
 // Disables HW decode acceleration for WebRTC.
 const char kDisableWebRtcHWDecoding[]       = "disable-webrtc-hw-decoding";
 
 // Disables HW encode acceleration for WebRTC.
 const char kDisableWebRtcHWEncoding[] = "disable-webrtc-hw-encoding";
+#endif
 
 // Enables negotiation of GCM cipher suites from RFC 7714 for SRTP in WebRTC.
 // See https://tools.ietf.org/html/rfc7714 for further information.
diff --git content/public/common/content_switches.h content/public/common/content_switches.h
index f9ae1f311aba..89d5c48db6a7 100644
--- content/public/common/content_switches.h
+++ content/public/common/content_switches.h
@@ -33,7 +33,11 @@ CONTENT_EXPORT extern const char kDisable2dCanvasImageChromium[];
 CONTENT_EXPORT extern const char kDisable3DAPIs[];
 CONTENT_EXPORT extern const char kDisableAccelerated2dCanvas[];
 CONTENT_EXPORT extern const char kDisableAcceleratedJpegDecoding[];
+#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+CONTENT_EXPORT extern const char kEnableAcceleratedMjpegDecode[];
+#else
 CONTENT_EXPORT extern const char kDisableAcceleratedMjpegDecode[];
+#endif
 CONTENT_EXPORT extern const char kDisableAcceleratedVideoDecode[];
 CONTENT_EXPORT extern const char kDisableAcceleratedVideoEncode[];
 CONTENT_EXPORT extern const char kDisableAudioSupportForDesktopShare[];
@@ -107,6 +111,9 @@ CONTENT_EXPORT extern const char kDisableZeroCopyDxgiVideo[];
 CONTENT_EXPORT extern const char kDomAutomationController[];
 extern const char kDisable2dCanvasClipAntialiasing[];
 CONTENT_EXPORT extern const char kDumpBlinkRuntimeCallStats[];
+#if defined(OS_LINUX) && !defined(OS_CHROMEOS) && !defined(OS_ANDROID)
+CONTENT_EXPORT extern const char kEnableAcceleratedVideo[];
+#endif
 CONTENT_EXPORT extern const char kEnableAggressiveDOMStorageFlushing[];
 CONTENT_EXPORT extern const char kEnableAutomation[];
 CONTENT_EXPORT extern const char kEnablePreferCompositingToLCDText[];
@@ -244,8 +251,10 @@ CONTENT_EXPORT extern const char kZygoteProcess[];
 
 #if BUILDFLAG(ENABLE_WEBRTC)
 CONTENT_EXPORT extern const char kDisableWebRtcEncryption[];
+#if defined(OS_CHROMEOS)
 CONTENT_EXPORT extern const char kDisableWebRtcHWDecoding[];
 CONTENT_EXPORT extern const char kDisableWebRtcHWEncoding[];
+#endif
 CONTENT_EXPORT extern const char kEnableWebRtcSrtpAesGcm[];
 CONTENT_EXPORT extern const char kEnableWebRtcSrtpEncryptedHeaders[];
 CONTENT_EXPORT extern const char kEnableWebRtcStunOrigin[];
diff --git content/renderer/media/webrtc/peer_connection_dependency_factory.cc content/renderer/media/webrtc/peer_connection_dependency_factory.cc
index 7a7738584996..6c2efd723913 100644
--- content/renderer/media/webrtc/peer_connection_dependency_factory.cc
+++ content/renderer/media/webrtc/peer_connection_dependency_factory.cc
@@ -245,12 +245,19 @@ void PeerConnectionDependencyFactory::InitializeSignalingThread(
 
   const base::CommandLine* cmd_line = base::CommandLine::ForCurrentProcess();
   if (gpu_factories && gpu_factories->IsGpuVideoAcceleratorEnabled()) {
+#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+    if (cmd_line->HasSwitch(switches::kEnableAcceleratedVideo))
+#else
     if (!cmd_line->HasSwitch(switches::kDisableWebRtcHWDecoding))
+#endif
       decoder_factory.reset(new RTCVideoDecoderFactory(gpu_factories));
 
-    if (!cmd_line->HasSwitch(switches::kDisableWebRtcHWEncoding)) {
+#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+    if (cmd_line->HasSwitch(switches::kEnableAcceleratedVideo))
+#else
+    if (!cmd_line->HasSwitch(switches::kDisableWebRtcHWEncoding))
+#endif
       encoder_factory.reset(new RTCVideoEncoderFactory(gpu_factories));
-    }
   }
 
 #if defined(OS_ANDROID)
diff --git content/renderer/render_thread_impl.cc content/renderer/render_thread_impl.cc
index d5f3d130b634..c72a8bb9f8d8 100644
--- content/renderer/render_thread_impl.cc
+++ content/renderer/render_thread_impl.cc
@@ -1485,7 +1485,11 @@ media::GpuVideoAcceleratorFactories* RenderThreadImpl::GetGpuFactories() {
   scoped_refptr<base::SingleThreadTaskRunner> media_task_runner =
       GetMediaThreadTaskRunner();
   const bool enable_video_accelerator =
+#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+      cmd_line->HasSwitch(switches::kEnableAcceleratedVideo) &&
+#else
       !cmd_line->HasSwitch(switches::kDisableAcceleratedVideoDecode) &&
+#endif
       (gpu_channel_host->gpu_feature_info()
            .status_values[gpu::GPU_FEATURE_TYPE_ACCELERATED_VIDEO_DECODE] ==
        gpu::kGpuFeatureStatusEnabled);
diff --git gpu/config/software_rendering_list.json gpu/config/software_rendering_list.json
index b1679dcf4e20..563b3ebb8796 100644
--- gpu/config/software_rendering_list.json
+++ gpu/config/software_rendering_list.json
@@ -372,17 +372,6 @@
         "all"
       ]
     },
-    {
-      "id": 48,
-      "description": "Accelerated video decode is unavailable on Linux",
-      "cr_bugs": [137247],
-      "os": {
-        "type": "linux"
-      },
-      "features": [
-        "accelerated_video_decode"
-      ]
-    },
     {
       "id": 50,
       "description": "Disable VMware software renderer on older Mesa",
diff --git media/gpu/BUILD.gn media/gpu/BUILD.gn
index ecd72bd14799..ec059f5aaf9d 100644
--- media/gpu/BUILD.gn
+++ media/gpu/BUILD.gn
@@ -24,6 +24,14 @@ if (is_mac) {
   import("//build/config/mac/mac_sdk.gni")
 }
 
+if (is_desktop_linux && use_vaapi) {
+  import("//build/config/linux/pkg_config.gni")
+
+  pkg_config("libva_config") {
+    packages = [ "libva" ]
+  }
+}
+
 if (use_vaapi) {
   action("libva_generate_stubs") {
     extra_header = "vaapi/va_stub_header.fragment"
@@ -353,6 +361,10 @@ component("gpu") {
     if (use_ozone) {
       deps += [ "//ui/ozone" ]
     }
+
+    if (is_desktop_linux) {
+      public_configs = [ ":libva_config" ]
+    }
   }
 
   if (is_win) {
